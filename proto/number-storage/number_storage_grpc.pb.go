// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: number_storage.proto

package number_storage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NumberStorageServiceClient is the client API for NumberStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NumberStorageServiceClient interface {
	GetNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NumberResponse, error)
	UpdateNumber(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error)
}

type numberStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNumberStorageServiceClient(cc grpc.ClientConnInterface) NumberStorageServiceClient {
	return &numberStorageServiceClient{cc}
}

func (c *numberStorageServiceClient) GetNumber(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/pb.NumberStorageService/GetNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *numberStorageServiceClient) UpdateNumber(ctx context.Context, in *NumberRequest, opts ...grpc.CallOption) (*NumberResponse, error) {
	out := new(NumberResponse)
	err := c.cc.Invoke(ctx, "/pb.NumberStorageService/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NumberStorageServiceServer is the server API for NumberStorageService service.
// All implementations must embed UnimplementedNumberStorageServiceServer
// for forward compatibility
type NumberStorageServiceServer interface {
	GetNumber(context.Context, *emptypb.Empty) (*NumberResponse, error)
	UpdateNumber(context.Context, *NumberRequest) (*NumberResponse, error)
	mustEmbedUnimplementedNumberStorageServiceServer()
}

// UnimplementedNumberStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNumberStorageServiceServer struct {
}

func (UnimplementedNumberStorageServiceServer) GetNumber(context.Context, *emptypb.Empty) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumber not implemented")
}
func (UnimplementedNumberStorageServiceServer) UpdateNumber(context.Context, *NumberRequest) (*NumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedNumberStorageServiceServer) mustEmbedUnimplementedNumberStorageServiceServer() {}

// UnsafeNumberStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NumberStorageServiceServer will
// result in compilation errors.
type UnsafeNumberStorageServiceServer interface {
	mustEmbedUnimplementedNumberStorageServiceServer()
}

func RegisterNumberStorageServiceServer(s grpc.ServiceRegistrar, srv NumberStorageServiceServer) {
	s.RegisterService(&NumberStorageService_ServiceDesc, srv)
}

func _NumberStorageService_GetNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberStorageServiceServer).GetNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NumberStorageService/GetNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberStorageServiceServer).GetNumber(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NumberStorageService_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NumberStorageServiceServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NumberStorageService/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NumberStorageServiceServer).UpdateNumber(ctx, req.(*NumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NumberStorageService_ServiceDesc is the grpc.ServiceDesc for NumberStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NumberStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NumberStorageService",
	HandlerType: (*NumberStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNumber",
			Handler:    _NumberStorageService_GetNumber_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _NumberStorageService_UpdateNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "number_storage.proto",
}
